
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import main.ast.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\006\004\000\002\007" +
    "\004\000\002\007\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\020\003\000\002" +
    "\020\003\000\002\017\011\000\002\023\011\000\002\023" +
    "\015\000\002\015\005\000\002\015\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\005\000\002\014" +
    "\003\000\002\016\004\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\011\000\002\021\011\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\002" +
    "\005\000\002\003\005\000\002\003\006\000\002\004\007" +
    "\000\002\004\007\000\002\010\005\000\002\024\010\000" +
    "\002\025\005\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\010\005\001\002\000\004\002\166\001" +
    "\002\000\004\041\143\001\002\000\004\012\007\001\002" +
    "\000\012\004\013\005\012\007\022\020\014\001\002\000" +
    "\004\002\000\001\002\000\016\004\ufffa\005\ufffa\007\ufffa" +
    "\013\ufffa\020\ufffa\040\ufffa\001\002\000\004\035\130\001" +
    "\002\000\004\035\063\001\002\000\004\044\026\001\002" +
    "\000\016\004\ufffe\005\ufffe\007\ufffe\013\ufffe\020\ufffe\040" +
    "\ufffe\001\002\000\016\004\ufffb\005\ufffb\007\ufffb\013\ufffb" +
    "\020\ufffb\040\ufffb\001\002\000\016\004\ufffc\005\ufffc\007" +
    "\ufffc\013\ufffc\020\ufffc\040\ufffc\001\002\000\016\004\ufffd" +
    "\005\ufffd\007\ufffd\013\ufffd\020\ufffd\040\ufffd\001\002\000" +
    "\014\004\013\005\012\007\022\013\025\020\014\001\002" +
    "\000\004\047\023\001\002\000\016\004\uffe4\005\uffe4\007" +
    "\uffe4\013\uffe4\020\uffe4\040\uffe4\001\002\000\016\004\uffff" +
    "\005\uffff\007\uffff\013\uffff\020\uffff\040\uffff\001\002\000" +
    "\004\002\uffd3\001\002\000\016\014\035\020\030\035\037" +
    "\045\040\046\027\047\032\001\002\000\054\004\uffe7\005" +
    "\uffe7\007\uffe7\013\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\036\uffe7\040\uffe7\042\uffe7\043\uffe7" +
    "\001\002\000\054\004\uffe9\005\uffe9\007\uffe9\013\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036" +
    "\uffe9\040\uffe9\042\uffe9\043\uffe9\001\002\000\054\004\uffed" +
    "\005\uffed\007\uffed\013\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\047\034\046\036\uffed\040\uffed\042\uffed\043" +
    "\uffed\001\002\000\016\004\ufff0\005\ufff0\007\ufff0\013\ufff0" +
    "\020\ufff0\040\ufff0\001\002\000\054\004\uffe5\005\uffe5\007" +
    "\uffe5\013\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\036\uffe5\040\uffe5\042\uffe5\043\uffe5\001\002" +
    "\000\022\004\ufff1\005\ufff1\007\ufff1\013\ufff1\020\ufff1\031" +
    "\044\032\043\040\ufff1\001\002\000\004\035\053\001\002" +
    "\000\054\004\uffea\005\uffea\007\uffea\013\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\036\uffea\040" +
    "\uffea\042\uffea\043\uffea\001\002\000\014\014\035\020\030" +
    "\035\037\045\040\046\027\001\002\000\054\004\uffe8\005" +
    "\uffe8\007\uffe8\013\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\001\002\000\010\031\044\032\043\036\042\001\002\000" +
    "\054\004\uffe6\005\uffe6\007\uffe6\013\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\040\uffe6" +
    "\042\uffe6\043\uffe6\001\002\000\014\014\035\020\030\035" +
    "\037\045\040\046\027\001\002\000\014\014\035\020\030" +
    "\035\037\045\040\046\027\001\002\000\054\004\uffef\005" +
    "\uffef\007\uffef\013\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\047\034\046\036\uffef\040\uffef\042\uffef\043\uffef" +
    "\001\002\000\014\014\035\020\030\035\037\045\040\046" +
    "\027\001\002\000\014\014\035\020\030\035\037\045\040" +
    "\046\027\001\002\000\054\004\uffec\005\uffec\007\uffec\013" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\036\uffec\040\uffec\042\uffec\043\uffec\001\002\000\054" +
    "\004\uffeb\005\uffeb\007\uffeb\013\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\040\uffeb\042" +
    "\uffeb\043\uffeb\001\002\000\054\004\uffee\005\uffee\007\uffee" +
    "\013\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\047" +
    "\034\046\036\uffee\040\uffee\042\uffee\043\uffee\001\002\000" +
    "\004\041\054\001\002\000\014\014\035\020\030\035\037" +
    "\045\040\046\027\001\002\000\012\031\044\032\043\042" +
    "\uffd0\043\uffd0\001\002\000\006\042\060\043\057\001\002" +
    "\000\014\014\035\020\030\035\037\045\040\046\027\001" +
    "\002\000\004\036\061\001\002\000\054\004\uffd2\005\uffd2" +
    "\007\uffd2\013\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\036\uffd2\040\uffd2\042\uffd2\043\uffd2\001" +
    "\002\000\012\031\044\032\043\042\uffd1\043\uffd1\001\002" +
    "\000\014\014\035\020\030\035\067\045\040\046\027\001" +
    "\002\000\022\023\107\024\111\025\104\026\106\027\105" +
    "\030\110\031\044\032\043\001\002\000\010\021\124\022" +
    "\125\036\ufff6\001\002\000\004\036\120\001\002\000\014" +
    "\014\035\020\030\035\037\045\040\046\027\001\002\000" +
    "\004\036\ufff5\001\002\000\024\023\107\024\111\025\104" +
    "\026\106\027\105\030\110\031\044\032\043\036\042\001" +
    "\002\000\004\036\073\001\002\000\010\021\074\022\075" +
    "\036\uffe3\001\002\000\004\035\101\001\002\000\004\035" +
    "\076\001\002\000\014\014\035\020\030\035\037\045\040" +
    "\046\027\001\002\000\004\036\100\001\002\000\004\036" +
    "\uffdf\001\002\000\014\014\035\020\030\035\037\045\040" +
    "\046\027\001\002\000\004\036\103\001\002\000\004\036" +
    "\uffe0\001\002\000\014\014\035\020\030\035\037\045\040" +
    "\046\027\001\002\000\014\014\035\020\030\035\037\045" +
    "\040\046\027\001\002\000\014\014\035\020\030\035\037" +
    "\045\040\046\027\001\002\000\014\014\035\020\030\035" +
    "\037\045\040\046\027\001\002\000\014\014\035\020\030" +
    "\035\037\045\040\046\027\001\002\000\014\014\035\020" +
    "\030\035\037\045\040\046\027\001\002\000\014\021\uffdd" +
    "\022\uffdd\031\044\032\043\036\uffdd\001\002\000\014\021" +
    "\uffd9\022\uffd9\031\044\032\043\036\uffd9\001\002\000\014" +
    "\021\uffde\022\uffde\031\044\032\043\036\uffde\001\002\000" +
    "\014\021\uffdb\022\uffdb\031\044\032\043\036\uffdb\001\002" +
    "\000\014\021\uffda\022\uffda\031\044\032\043\036\uffda\001" +
    "\002\000\014\021\uffdc\022\uffdc\031\044\032\043\036\uffdc" +
    "\001\002\000\004\037\121\001\002\000\012\004\013\005" +
    "\012\007\022\020\014\001\002\000\014\004\013\005\012" +
    "\007\022\020\014\040\123\001\002\000\016\004\ufff4\005" +
    "\ufff4\007\ufff4\013\ufff4\020\ufff4\040\ufff4\001\002\000\014" +
    "\014\035\020\030\035\037\045\040\046\027\001\002\000" +
    "\014\014\035\020\030\035\037\045\040\046\027\001\002" +
    "\000\004\036\uffe1\001\002\000\004\036\uffe2\001\002\000" +
    "\014\014\035\020\030\035\067\045\040\046\027\001\002" +
    "\000\004\036\132\001\002\000\004\037\133\001\002\000" +
    "\012\004\013\005\012\007\022\020\014\001\002\000\014" +
    "\004\013\005\012\007\022\020\014\040\135\001\002\000" +
    "\020\004\ufff3\005\ufff3\006\136\007\ufff3\013\ufff3\020\ufff3" +
    "\040\ufff3\001\002\000\004\037\137\001\002\000\012\004" +
    "\013\005\012\007\022\020\014\001\002\000\014\004\013" +
    "\005\012\007\022\020\014\040\141\001\002\000\016\004" +
    "\ufff2\005\ufff2\007\ufff2\013\ufff2\020\ufff2\040\ufff2\001\002" +
    "\000\006\011\162\041\163\001\002\000\004\020\144\001" +
    "\002\000\006\042\150\043\147\001\002\000\004\042\146" +
    "\001\002\000\006\011\uffd7\041\uffd7\001\002\000\004\020" +
    "\144\001\002\000\004\044\151\001\002\000\004\041\152" +
    "\001\002\000\010\015\153\016\154\017\156\001\002\000" +
    "\006\042\ufff9\043\ufff9\001\002\000\006\042\ufff8\043\ufff8" +
    "\001\002\000\006\042\uffd5\043\uffd5\001\002\000\006\042" +
    "\ufff7\043\ufff7\001\002\000\004\043\160\001\002\000\010" +
    "\015\153\016\154\017\156\001\002\000\006\042\uffd4\043" +
    "\uffd4\001\002\000\004\012\uffd8\001\002\000\004\020\144" +
    "\001\002\000\004\042\165\001\002\000\006\011\uffd6\041" +
    "\uffd6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\002\005\006\003\001\001\000\002\001" +
    "\001\000\004\003\141\001\001\000\004\010\007\001\001" +
    "\000\016\007\020\011\014\015\017\016\016\017\015\023" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\023\015\017\016\016\017\015\023\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\033\013\030\014\035\024" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\040" +
    "\013\030\014\035\024\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\051\014\035" +
    "\024\032\001\001\000\010\013\044\014\035\024\032\001" +
    "\001\000\002\001\001\000\006\014\050\024\032\001\001" +
    "\000\006\014\047\024\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\054\013\030\014\035\024\032\025\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\061\013\030" +
    "\014\035\024\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\063\013\030\014\035" +
    "\020\065\021\067\022\064\024\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\070" +
    "\013\030\014\035\022\071\024\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\063\013" +
    "\030\014\035\022\076\024\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\063\013\030\014\035\022" +
    "\101\024\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\116\013\030\014\035\024\032\001\001\000" +
    "\012\012\115\013\030\014\035\024\032\001\001\000\012" +
    "\012\114\013\030\014\035\024\032\001\001\000\012\012" +
    "\113\013\030\014\035\024\032\001\001\000\012\012\112" +
    "\013\030\014\035\024\032\001\001\000\012\012\111\013" +
    "\030\014\035\024\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\121" +
    "\011\014\015\017\016\016\017\015\023\010\001\001\000" +
    "\014\011\023\015\017\016\016\017\015\023\010\001\001" +
    "\000\002\001\001\000\014\012\063\013\030\014\035\022" +
    "\126\024\032\001\001\000\014\012\063\013\030\014\035" +
    "\022\125\024\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\063\013\030\014\035\020\130\021\067" +
    "\022\064\024\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\133\011\014\015\017\016\016\017\015" +
    "\023\010\001\001\000\014\011\023\015\017\016\016\017" +
    "\015\023\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\137\011\014\015\017\016\016\017\015\023" +
    "\010\001\001\000\014\011\023\015\017\016\016\017\015" +
    "\023\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	static File f = new File("ts.txt");
	private static BufferedWriter bw;
	String s = "";
	String Error = "";
	boolean b=false;
	ArrayList<String> listaVarId = new ArrayList<String>();
	ArrayList<String> listaTipos = new ArrayList<String>();
	ArrayList<String> listaSimbolos = new ArrayList<String>();
	ArrayList<String> listaSimbolosNombre = new ArrayList<String>();
	
    public void syntax_error(Symbol s) {
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. valor " + s.value );
        Error = "Error en la linea " + (s.right+1) + " columna " + s.left + ". "
                + s + " no reconocido. valor " + s.value ;
     
    }
    public void writeSymbolTable2(){
    	try{
			bw = new BufferedWriter(new FileWriter(f,true));
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";	

		for (int i = 0; i < listaSimbolos.size(); i++) {
			String A = listaSimbolos.get(i);
			String B = listaSimbolosNombre.get(i);
			if (B=="Const_String"){
				Linea="_"+A+","+B+", ,"+A+","+A.length();
			}else{
				Linea="_"+A+","+B+", ,"+A+", ";
			}
			
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}
    
    
	public void writeSymbolTable(){
		try{
			if (!b) {
				bw = new BufferedWriter(new FileWriter(f,false));
				b=true;
			} else {
				bw = new BufferedWriter(new FileWriter(f,true));
			}
			
		}catch (IOException e){
			e.printStackTrace();
		}
	
		String Linea = "";	
		int j = listaTipos.size();
		for (int i = 0; i < listaVarId.size(); i++) {
			String ID = listaVarId.get(i);
			String T = listaTipos.get(--j);
			Linea=ID+",VarId,"+T+", , ";
 			try {
				bw.write(Linea);
				bw.newLine();
				bw.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		listaVarId.clear();
		listaTipos.clear();
		//listaSimbolos.add(s.split(",")[0]);	
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= declaracion programa 
            {
              NodoPrograma RESULT =null;
		int programaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodoSentencia> programa = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("pgm Regla 0 Compila correctamente llegando al simbolo start");
											s = s + "pgm Regla 0 Compila correctamente llegando al simbolo start\n";
											writeSymbolTable2();
											RESULT = new NodoPrograma( programa ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listadesentencias ::= listadesentencias lineadesentencia 
            {
              List<NodoSentencia> RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> sentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia sentencia = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 1] Sentencias"); 
											s = s + "[Regla 1] Sentencias\n";
                                            sentencias.add( sentencia );
                                            RESULT = sentencias; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadesentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listadesentencias ::= lineadesentencia 
            {
              List<NodoSentencia> RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia sentencia = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 2] Sentencia"); 
											s = s + "[Regla 2] Sentencia\n";
											ArrayList<NodoSentencia> sentencias = new ArrayList<NodoSentencia>();
                                            sentencias.add( sentencia );
                                            RESULT = sentencias; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadesentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lineadesentencia ::= asignacion 
            {
              NodoSentencia RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoAsig asig = (NodoAsig)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 3] Linea de sentencia - Asignación"); 
											s = s + "[Regla 3] Linea de sentencia - Asignación\n";
											RESULT = asig; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lineadesentencia ::= salida 
            {
              NodoSentencia RESULT =null;
		int salidaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int salidaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSalida salida = (NodoSalida)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 4] Linea de sentencia - Salida"); 
											s = s + "[Regla 4] Linea de sentencia - Salida\n";
											RESULT = salida; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lineadesentencia ::= while 
            {
              NodoSentencia RESULT =null;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoWhile ciclo = (NodoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 5] Linea de sentencia - While"); 
											s = s + "[Regla 5] Linea de sentencia - While\n";
											RESULT = ciclo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lineadesentencia ::= if 
            {
              NodoSentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIfGenerico si = (NodoIfGenerico)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 6] Linea de sentencia - If"); 
											s = s + "[Regla 6] Linea de sentencia - If\n";
											RESULT = si; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadesentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= PInt 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 7] Tipo - INT");
											s = s + "[Regla 7] Tipo - INT\n";
											listaTipos.add(in.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= PFloat 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 8] Tipo - FLOAT"); 
											s = s + "[Regla 8] Tipo - FLOAT\n";
											listaTipos.add(fl.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= PString 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 9] Tipo - STRING"); 
											s = s + "[Regla 9] Tipo - STRING\n";
											listaTipos.add(st.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cond ::= condicion 
            {
              NodoCondicion RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 10] Cond - Condición"); 
											s = s + "[Regla 10] Cond - Condición\n";
											RESULT = condicion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cond ::= condicionlogica 
            {
              NodoCondicion RESULT =null;
		int condicionlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicionl = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 11] Cond - Condicion Lógica"); 
											s = s + "[Regla 11] Cond - Condicion Lógica\n";
											RESULT = condicionl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // while ::= While ParA cond ParC LlaveA listadesentencias LlaveC 
            {
              NodoWhile RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> sentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 12] While");
											s = s + "[Regla 12] While\n";
											RESULT = new NodoWhile( condicion, sentencias ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= If ParA cond ParC LlaveA listadesentencias LlaveC 
            {
              NodoIfGenerico RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> sentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 13] If");
											s = s + "[Regla 13] If\n";
											RESULT = new NodoIf( condicion, sentencias ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= If ParA cond ParC LlaveA listadesentencias LlaveC Else LlaveA listadesentencias LlaveC 
            {
              NodoIfGenerico RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<NodoSentencia> sentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentenciaselseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciaselseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> sentenciaselse = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 14] If Else");
											s = s + "[Regla 14] If Else\n";
											RESULT = new NodoIfElse( condicion, sentencias, sentenciaselse ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= VarId Asignacion expresion 
            {
              NodoAsig RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 15] Asignacion Expresion");
											s = s + "[Regla 15] Asignacion Expresion\n";
											RESULT = new NodoAsig( new NodoVarId( (String) id ), expresion ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignacion ::= VarId Asignacion Const_String 
            {
              NodoAsig RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 16] Asignacion String");
											s = s + "[Regla 16] Asignacion String\n";
											listaSimbolos.add(cs.toString());
											listaSimbolosNombre.add("Const_String");
											RESULT = new NodoAsig( new NodoVarId( (String) id ), new NodoCteString( (String) cs ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= expresion Suma termino 
            {
              NodoExpresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 17] Expresion + Termino");
											s = s + "[Regla 17] Expresion + Termino\n";
											RESULT = new NodoSuma( expresion, termino ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion Resta termino 
            {
              NodoExpresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 18] Expresion - Termino");
											s = s + "[Regla 18] Expresion - Termino\n";
											RESULT = new NodoResta( expresion, termino ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= termino 
            {
              NodoExpresion RESULT =null;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 19] Expresion Termino");
											s = s + "[Regla 19] Expresion Termino\n";
											RESULT = termino; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // termino ::= termino Multiplicacion factor 
            {
              NodoExpresion RESULT =null;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion factor = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 20] Termino * Factor");
											s = s + "[Regla 20] Termino * Factor\n";
											RESULT = new NodoMultiplicacion( termino, factor ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termino ::= termino Division factor 
            {
              NodoExpresion RESULT =null;
		int terminoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int terminoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion termino = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion factor = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 21] Termino / Factor");
											s = s + "[Regla 21] Termino / Factor\n";
											RESULT = new NodoDivision( termino, factor ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termino ::= factor 
            {
              NodoExpresion RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion factor = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 22] Termino Factor");
											s = s + "[Regla 22] Termino Factor\n";
											RESULT = factor; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // factor ::= VarId 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 23] Factor VarId");
											s = s + "[Regla 23] Factor VarId\n";
											RESULT = new NodoVarId((String) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= Numero 
            {
              NodoExpresion RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 24] Factor Numero");
											s = s + "[Regla 24] Factor Numero\n";
											listaSimbolos.add(integer.toString());
											listaSimbolosNombre.add("Numero");
											RESULT = new NodoCteInt(Integer.parseInt((String) integer)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= Real 
            {
              NodoExpresion RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 25] Factor Real");
											s = s + "[Regla 25] Factor Real\n";
											listaSimbolos.add(real.toString());
											listaSimbolosNombre.add("Real");
											RESULT = new NodoCteFloat(Float.parseFloat((String) real)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= ParA expresion ParC 
            {
              NodoExpresion RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 26] Factor Expresion");
											s = s + "[Regla 26] Factor Expresion\n";
											RESULT = expresion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= avg 
            {
              NodoExpresion RESULT =null;
		int avgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoAvg avg = (NodoAvg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 27] Factor Avg");
											s = s + "[Regla 27] Factor Avg\n";
											RESULT = avg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // salida ::= Print Const_String 
            {
              NodoSalida RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 28] Factor Expresion");
											s = s + "[Regla 28] Factor Expresion\n";
											listaSimbolos.add(cs.toString());
											listaSimbolosNombre.add("Const_String");
											RESULT = new NodoSalida( new NodoCteString( (String) cs ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicionlogica ::= ParA condicion ParC 
            {
              NodoCondicion RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCondicion condicion = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 29] (Condicion)");
											s = s + "[Regla 29] Condicion\n";
											RESULT = condicion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicionlogica ::= condicion And condicion 
            {
              NodoCondicion RESULT =null;
		int condicion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoCondicion condicion_i = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion_d = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 30] Condicion And Condicion");
											s = s + "[Regla 30] Condicion And Condicion\n";
											RESULT = new NodoAnd( condicion_i, condicion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicionlogica ::= condicion Or condicion 
            {
              NodoCondicion RESULT =null;
		int condicion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoCondicion condicion_i = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condicion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCondicion condicion_d = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 31] Condicion Or Condicion");
											s = s + "[Regla 31] Condicion Or Condicion\n";
											RESULT = new NodoOr( condicion_i, condicion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicionlogica ::= ParA condicion ParC And ParA condicion ParC 
            {
              NodoCondicion RESULT =null;
		int condicion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoCondicion condicion_i = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCondicion condicion_d = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 32] (Condicion) And (Condicion)");
											s = s + "[Regla 32] (Condicion) And (Condicion)\n";
											RESULT = new NodoAnd( condicion_i, condicion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicionlogica ::= ParA condicion ParC Or ParA condicion ParC 
            {
              NodoCondicion RESULT =null;
		int condicion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoCondicion condicion_i = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condicion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoCondicion condicion_d = (NodoCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 33] (Condicion) Or (Condicion)");
											s = s + "[Regla 33] (Condicion) Or (Condicion)\n";
											RESULT = new NodoOr( condicion_i, condicion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionlogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= expresion Mayor expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_i = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_d = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 34] Expresion Operacion Mayor Expresion");
											s = s + "[Regla 34] Expresion Operacion Mayor Expresion\n";
											RESULT = new NodoMayor( expresion_i, expresion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= expresion MayorI expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_i = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_d = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 35] Expresion Operacion MayorI Expresion");
											s = s + "[Regla 35] Expresion Operacion MayorI Expresion\n";
											RESULT = new NodoMayorI( expresion_i, expresion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= expresion Menor expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_i = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_d = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 36] Expresion Operacion Menor Expresion");
											s = s + "[Regla 36] Expresion Operacion Menor Expresion\n";
											RESULT = new NodoMenor( expresion_i, expresion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= expresion MenorI expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_i = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_d = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 37] Expresion Operacion MenorI Expresion");
											s = s + "[Regla 37] Expresion Operacion MenorI Expresion\n";
											RESULT = new NodoMenorI( expresion_i, expresion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= expresion Distinto expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_i = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_d = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 38] Expresion Operacion Distinto Expresion");
											s = s + "[Regla 38] Expresion Operacion Distinto Expresion\n";
											RESULT = new NodoDistinto( expresion_i, expresion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= expresion Igual expresion 
            {
              NodoCondicion RESULT =null;
		int expresion_ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion_iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion expresion_i = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion_d = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 39] Expresion Operacion Igual Expresion");
											s = s + "[Regla 39] Expresion Operacion Igual Expresion\n";
											RESULT = new NodoIgual( expresion_i, expresion_d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= DeclareB listadedeclaraciones DeclareE 
            {
              Object RESULT =null;
		 System.out.println("[Regla 40] Declaracion");
											s = s + "[Regla 40] Declaracion\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listadedeclaraciones ::= CorcheteA lineadedeclaracion CorcheteC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 41] Lista de Declaraciones");
											s = s + "[Regla 41] Lista de Declaraciones\n";
											writeSymbolTable(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadedeclaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listadedeclaraciones ::= listadedeclaraciones CorcheteA lineadedeclaracion CorcheteC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 42] Lista de Declaraciones multiples");
											s = s + "[Regla 42] Lista de Declaraciones multiples\n";
											writeSymbolTable(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadedeclaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lineadedeclaracion ::= VarId CorcheteC Asignacion CorcheteA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 43] Linea de declaracion");
											s = s + "[Regla 43] Linea de declaracion\n";
											listaVarId.add(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadedeclaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lineadedeclaracion ::= VarId Coma lineadedeclaracion Coma tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("[Regla 44] Linea de declaracion multiple");
											s = s + "[Regla 44] Linea de declaracion multiple\n";
											listaVarId.add(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineadedeclaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // programa ::= ProgramB listadesentencias ProgramE 
            {
              List<NodoSentencia> RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> sentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[Regla 45] Programa");
											s = s + "[Regla 45] Programa\n";
											RESULT = sentencias; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // avg ::= Avg ParA CorcheteA lista CorcheteC ParC 
            {
              NodoAvg RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoExpresion> lista = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("[Regla 46] Programa");
											s = s + "[Regla 46] Programa\n";
											RESULT = new NodoAvg( lista ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("avg",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista ::= lista Coma expresion 
            {
              List<NodoExpresion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoExpresion> lista = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 47] Lista");
											s = s + "[Regla 47] Lista\n";
                                            lista.add(expresion);
                                            RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista ::= expresion 
            {
              List<NodoExpresion> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion expresion = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 48] Lista expresion");
											s = s + "[Regla 48] Lista expresion\n";
											ArrayList<NodoExpresion> lista = new ArrayList<NodoExpresion>();
                                            lista.add(expresion);
                                            RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
